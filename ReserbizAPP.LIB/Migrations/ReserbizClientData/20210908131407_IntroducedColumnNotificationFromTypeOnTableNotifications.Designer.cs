// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReserbizAPP.LIB.DbContexts;

namespace ReserbizAPP.LIB.Migrations.ReserbizClientData
{
    [DbContext(typeof(ReserbizClientDataContext))]
    [Migration("20210908131407_IntroducedColumnNotificationFromTypeOnTableNotifications")]
    partial class IntroducedColumnNotificationFromTypeOnTableNotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.AccountStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdvancedPaymentDurationValue")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<int>("DepositPaymentDurationValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationUnit")
                        .HasColumnType("int");

                    b.Property<float>("ElectricBill")
                        .HasColumnType("real");

                    b.Property<bool>("ExcludeElectricBill")
                        .HasColumnType("bit");

                    b.Property<bool>("ExcludeWaterBill")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeMiscellaneousCheckAndCalculateForPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MiscellaneousDueDate")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyAmountPerDurationUnit")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyEffectiveAfterDurationUnit")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyEffectiveAfterDurationValue")
                        .HasColumnType("int");

                    b.Property<float>("PenaltyValue")
                        .HasColumnType("real");

                    b.Property<int>("PenaltyValueType")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<DateTime>("SMSNotificationLastDateSent")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UtilityBillsDueDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("WaterBill")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AccountStatements");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.AccountStatementMiscellaneous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountStatementId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.ToTable("AccountStatementMiscellaneous");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ClientSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClientSettings");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("TenantId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<int>("DurationUnit")
                        .HasColumnType("int");

                    b.Property<int>("DurationValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EncashDepositAmount")
                        .HasColumnType("bit");

                    b.Property<int?>("EncashedDepositAmountByAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EncashedDepositAmountDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncludeMiscellaneousFees")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludePenaltyAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeRentalFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeUtilityBills")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenContract")
                        .HasColumnType("bit");

                    b.Property<int?>("SpaceId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EncashedDepositAmountByAccountId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stacktrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.GeneratedAccountStatementNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AccountStatementDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AccountStatementId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.HasIndex("ContractId");

                    b.HasIndex("TenantId");

                    b.ToTable("GeneratedAccountStatementNotifications");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationFromId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationFromType")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.PaymentBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountStatementId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmountFromDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentForType")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedById")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PaymentBreakdowns");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.PaymentRegisterNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentRegisterNotifications");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.PenaltyBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountStatementId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.ToTable("PenaltyBreakdowns");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Space", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("SpaceTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.SpaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AvailableSlot")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SpaceTypes");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdvancedPaymentDurationValue")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<int>("DepositPaymentDurationValue")
                        .HasColumnType("int");

                    b.Property<int>("DurationUnit")
                        .HasColumnType("int");

                    b.Property<float>("ElectricBillAmount")
                        .HasColumnType("real");

                    b.Property<bool>("ExcludeElectricBill")
                        .HasColumnType("bit");

                    b.Property<bool>("ExcludeWaterBill")
                        .HasColumnType("bit");

                    b.Property<int>("GenerateAccountStatementDaysBeforeValue")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeMiscellaneousCheckAndCalculateForPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumNumberOfOccupants")
                        .HasColumnType("int");

                    b.Property<int>("MiscellaneousDueDate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyAmountPerDurationUnit")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyEffectiveAfterDurationUnit")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyEffectiveAfterDurationValue")
                        .HasColumnType("int");

                    b.Property<float>("PenaltyValue")
                        .HasColumnType("real");

                    b.Property<int>("PenaltyValueType")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TermParentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<float>("WaterBillAmount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("SpaceTypeId");

                    b.HasIndex("TermParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.TermMiscellaneous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TermMiscellaneous");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.TermVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("TermId");

                    b.ToTable("TermVersions");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Account", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedAccounts")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Accounts_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedAccounts")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Accounts_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedAccounts")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_Accounts_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedAccounts")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Accounts_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.AccountStatement", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Contract", "Contract")
                        .WithMany("AccountStatements")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedAccountStatements")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_AccountStatements_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedAccountStatements")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_AccountStatements_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedAccountStatements")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_AccountStatements_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedAccountStatements")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_AccountStatements_UpdatedById_Accounts_AccountId");

                    b.Navigation("Contract");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.AccountStatementMiscellaneous", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.AccountStatement", "AccountStatement")
                        .WithMany("AccountStatementMiscellaneous")
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ClientSettings", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedClientSettings")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ClientSettings_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedClientSettings")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_ClientSettings_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedClientSettings")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_ClientSettings_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedClientSettings")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_ClientSettings_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ContactPerson", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedContactPersons")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ContactPersons_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedContactPersons")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_ContactPersons_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedContactPersons")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_ContactPersons_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Tenant", "Tenant")
                        .WithMany("ContactPersons")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedContactPersons")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_ContactPersons_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Tenant");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Contract", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedContracts")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Contracts_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedContracts")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Contracts_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedContracts")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_Contracts_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "EncashedDepositAmountByAccount")
                        .WithMany()
                        .HasForeignKey("EncashedDepositAmountByAccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Space", "Space")
                        .WithMany("Contracts")
                        .HasForeignKey("SpaceId");

                    b.HasOne("ReserbizAPP.LIB.Models.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Term", "Term")
                        .WithMany("Contracts")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedContracts")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Contracts_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EncashedDepositAmountByAccount");

                    b.Navigation("Space");

                    b.Navigation("Tenant");

                    b.Navigation("Term");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.ErrorLog", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "User")
                        .WithMany("ErrorLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ErrorLogs_Accounts_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.GeneratedAccountStatementNotification", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.AccountStatement", "AccountStatement")
                        .WithMany()
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");

                    b.Navigation("Contract");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.PaymentBreakdown", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.AccountStatement", "AccountStatement")
                        .WithMany("PaymentBreakdowns")
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedPaymentBreakdowns")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_PaymentBreakdown_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedPaymentBreakdowns")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_PaymentBreakdowns_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedPaymentBreakdowns")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_PaymentBreakdown_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedPaymentBreakdowns")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_PaymentBreakdowns_UpdatedById_Accounts_AccountId");

                    b.Navigation("AccountStatement");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ReceivedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.PenaltyBreakdown", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.AccountStatement", "AccountStatement")
                        .WithMany("PenaltyBreakdowns")
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.RefreshToken", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_RefreshToken_Accounts_AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Space", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedSpaces")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Spaces_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedSpaces")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Spaces_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedSpaces")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_Spaces_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.SpaceType", "SpaceType")
                        .WithMany("Spaces")
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedSpaces")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Spaces_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("SpaceType");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.SpaceType", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedSpaceTypes")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_SpaceTypes_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedSpaceTypes")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_SpaceTypes_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedSpaceTypes")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_SpaceTypes_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedSpaceTypes")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_SpaceTypes_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Tenant", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedTenants")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Tenants_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedTenants")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Tenants_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedTenants")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_Tenants_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedTenants")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Tenants_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Term", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedTerms")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Terms_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedTerms")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Terms_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedTerms")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_Terms_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.SpaceType", "SpaceType")
                        .WithMany("Terms")
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Term", "TermParent")
                        .WithMany("TermChildren")
                        .HasForeignKey("TermParentId")
                        .HasConstraintName("FK_Terms_Terms_TermParentId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedTerms")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Terms_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("SpaceType");

                    b.Navigation("TermParent");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.TermMiscellaneous", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Account", "CreatedBy")
                        .WithMany("CreatedTermMiscellaneous")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_TermMiscellaneous_CreatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeactivatedBy")
                        .WithMany("DeactivatedTermMiscellaneous")
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_TermMiscellaneous_DeactivatedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "DeletedBy")
                        .WithMany("DeletedTermMiscellaneous")
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("FK_TermMiscellaneous_DeletedById_Accounts_AccountId");

                    b.HasOne("ReserbizAPP.LIB.Models.Term", "Term")
                        .WithMany("TermMiscellaneous")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Account", "UpdatedBy")
                        .WithMany("UpdatedTermMiscellaneous")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_TermMiscellaneous_UpdatedById_Accounts_AccountId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Term");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.TermVersion", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserbizAPP.LIB.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.UserNotification", b =>
                {
                    b.HasOne("ReserbizAPP.LIB.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Account", b =>
                {
                    b.Navigation("CreatedAccounts");

                    b.Navigation("CreatedAccountStatements");

                    b.Navigation("CreatedClientSettings");

                    b.Navigation("CreatedContactPersons");

                    b.Navigation("CreatedContracts");

                    b.Navigation("CreatedPaymentBreakdowns");

                    b.Navigation("CreatedSpaces");

                    b.Navigation("CreatedSpaceTypes");

                    b.Navigation("CreatedTenants");

                    b.Navigation("CreatedTermMiscellaneous");

                    b.Navigation("CreatedTerms");

                    b.Navigation("DeactivatedAccounts");

                    b.Navigation("DeactivatedAccountStatements");

                    b.Navigation("DeactivatedClientSettings");

                    b.Navigation("DeactivatedContactPersons");

                    b.Navigation("DeactivatedContracts");

                    b.Navigation("DeactivatedPaymentBreakdowns");

                    b.Navigation("DeactivatedSpaces");

                    b.Navigation("DeactivatedSpaceTypes");

                    b.Navigation("DeactivatedTenants");

                    b.Navigation("DeactivatedTermMiscellaneous");

                    b.Navigation("DeactivatedTerms");

                    b.Navigation("DeletedAccounts");

                    b.Navigation("DeletedAccountStatements");

                    b.Navigation("DeletedClientSettings");

                    b.Navigation("DeletedContactPersons");

                    b.Navigation("DeletedContracts");

                    b.Navigation("DeletedPaymentBreakdowns");

                    b.Navigation("DeletedSpaces");

                    b.Navigation("DeletedSpaceTypes");

                    b.Navigation("DeletedTenants");

                    b.Navigation("DeletedTermMiscellaneous");

                    b.Navigation("DeletedTerms");

                    b.Navigation("ErrorLogs");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UpdatedAccounts");

                    b.Navigation("UpdatedAccountStatements");

                    b.Navigation("UpdatedClientSettings");

                    b.Navigation("UpdatedContactPersons");

                    b.Navigation("UpdatedContracts");

                    b.Navigation("UpdatedPaymentBreakdowns");

                    b.Navigation("UpdatedSpaces");

                    b.Navigation("UpdatedSpaceTypes");

                    b.Navigation("UpdatedTenants");

                    b.Navigation("UpdatedTermMiscellaneous");

                    b.Navigation("UpdatedTerms");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.AccountStatement", b =>
                {
                    b.Navigation("AccountStatementMiscellaneous");

                    b.Navigation("PaymentBreakdowns");

                    b.Navigation("PenaltyBreakdowns");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Contract", b =>
                {
                    b.Navigation("AccountStatements");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Space", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.SpaceType", b =>
                {
                    b.Navigation("Spaces");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Tenant", b =>
                {
                    b.Navigation("ContactPersons");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ReserbizAPP.LIB.Models.Term", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("TermChildren");

                    b.Navigation("TermMiscellaneous");
                });
#pragma warning restore 612, 618
        }
    }
}
